{"version":3,"sources":["../../src/elements/Supervisor.js"],"names":["Supervisor","constructor","managers","elements","map","m","element","deploy","manager","push","startup","error","status"],"mappings":";;;;;;AAAA;;;;;;AAEe,MAAMA,UAAN,CAAiB;AAC9BC,gBAAc;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAED,MAAIC,QAAJ,GAAe;AACb,WAAO,KAAKD,QAAL,CAAcE,GAAd,CAAkBC,KAAKA,EAAEC,OAAzB,CAAP;AACD;;AAED,QAAMC,MAAN,CAAaD,OAAb,EAAsB;AACpB,QAAIE,UAAU,sBAAYF,OAAZ,CAAd;AACA,SAAKJ,QAAL,CAAcO,IAAd,CAAmBD,OAAnB;;AAEA,QAAI;AACF,YAAMA,QAAQE,OAAR,EAAN;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,cAAQM,MAAR,GAAiB,QAAjB;AACAN,cAAQK,KAAR,GAAgBA,KAAhB;AACD;;AAED,WAAOH,OAAP;AACD;AArB6B;kBAAXR,U","file":"Supervisor.js","sourcesContent":["import Manager from './Manager'\n\nexport default class Supervisor {\n  constructor() {\n    this.managers = []\n  }\n\n  get elements() {\n    return this.managers.map(m => m.element)\n  }\n\n  async deploy(element) {\n    let manager = new Manager(element)\n    this.managers.push(manager)\n\n    try {\n      await manager.startup()\n    } catch (error) {\n      element.status = 'failed'\n      element.error = error\n    }\n\n    return manager\n  }\n}\n"]}