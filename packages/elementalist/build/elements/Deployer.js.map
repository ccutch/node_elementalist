{"version":3,"sources":["../../src/elements/Deployer.js"],"names":["Deployer","constructor","element","run","buildImage","getImagePorts","createService","getPublishedPorts","status","imageName","name","source","ports","toString","trim","split","internalPorts","map","port"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMA,QAAN,CAAe;AAC5BC,cAAYC,OAAZ,EAAqB;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAMC,GAAN,GAAY;AACV,UAAM,KAAKC,UAAL,EAAN;AACA,UAAM,KAAKC,aAAL,EAAN;AACA,UAAM,KAAKC,aAAL,EAAN;AACA,UAAM,KAAKC,iBAAL,EAAN;;AAEA,SAAKL,OAAL,CAAaM,MAAb,GAAsB,UAAtB;AACD;;AAED,QAAMJ,UAAN,GAAmB;AACjB,SAAKF,OAAL,CAAaM,MAAb,GAAsB,UAAtB;AACA,SAAKN,OAAL,CAAaO,SAAb,GAA0B,kBAAiB,KAAKP,OAAL,CAAaQ,IAAK,EAA7D;;AAEA,UAAM,sBAAO,OAAP,EAAgB,OAAhB,EAAyB,KAAKR,OAAL,CAAaO,SAAtC,EAAiD,KAAKP,OAAL,CAAaS,MAA9D,CAAN;AACA,UAAM,sBAAO,MAAP,EAAe,KAAKT,OAAL,CAAaO,SAA5B,CAAN;AACD;;AAED,QAAMJ,aAAN,GAAsB;AACpB,QAAIO,QAAQ,CAAC,MAAM,sBACjB,SADiB,EAEjB,UAFiB,EAGjB,2DAHiB,EAIjB,KAAKV,OAAL,CAAaO,SAJI,CAAP,EAMTI,QANS,CAMA,OANA,EAOTC,IAPS,GAQTC,KARS,CAQH,GARG,CAAZ;;AAUA,SAAKb,OAAL,CAAac,aAAb,GAA6BJ,KAA7B;AACD;;AAED,QAAMN,aAAN,GAAsB;AACpB,SAAKJ,OAAL,CAAaM,MAAb,GAAsB,WAAtB;AACA,QAAII,QAAQ,KAAKV,OAAL,CAAac,aAAb,CAA2BC,GAA3B,CAA+BC,QAAQ;AACjD,aAAQ,cAAaA,IAAK,EAA1B;AACD,KAFW,CAAZ;;AAIA,UAAM,sBACJ,SADI,EAEJ,QAFI,EAGJ,QAHI,EAIJ,KAAKhB,OAAL,CAAaQ,IAJT,EAKJ,GAAGE,KALC,EAMJ,KAAKV,OAAL,CAAaO,SANT,CAAN;AAQD;;AAED,QAAMF,iBAAN,GAA0B;AACxB,QAAIK,QAAQ,MAAM,sBAChB,SADgB,EAEhB,SAFgB,EAGhB,UAHgB,EAIhB,qDAJgB,EAKhB,KAAKV,OAAL,CAAaQ,IALG,CAAlB;;AAQA,SAAKR,OAAL,CAAaU,KAAb,GAAqBA,MAClBC,QADkB,CACT,OADS,EAElBC,IAFkB,GAGlBC,KAHkB,CAGZ,GAHY,CAArB;AAID;AAlE2B;kBAATf,Q","file":"Deployer.js","sourcesContent":["import assert from 'assert'\nimport Element from './Element'\nimport docker from '../docker'\n\nexport default class Deployer {\n  constructor(element) {\n    // assert(this.element instanceof Element)\n    this.element = element\n  }\n\n  async run() {\n    await this.buildImage()\n    await this.getImagePorts()\n    await this.createService()\n    await this.getPublishedPorts()\n\n    this.element.status = 'deployed'\n  }\n\n  async buildImage() {\n    this.element.status = 'building'\n    this.element.imageName = `localhost:5000/${this.element.name}`\n\n    await docker('build', '--tag', this.element.imageName, this.element.source)\n    await docker('push', this.element.imageName)\n  }\n\n  async getImagePorts() {\n    let ports = (await docker(\n      'inspect',\n      '--format',\n      '{{range $p, $conf := .Config.ExposedPorts}}{{$p}} {{end}}',\n      this.element.imageName\n    ))\n      .toString('utf-8')\n      .trim()\n      .split(' ')\n\n    this.element.internalPorts = ports\n  }\n\n  async createService() {\n    this.element.status = 'deploying'\n    let ports = this.element.internalPorts.map(port => {\n      return `--publish=:${port}`\n    })\n\n    await docker(\n      'service',\n      'create',\n      '--name',\n      this.element.name,\n      ...ports,\n      this.element.imageName\n    )\n  }\n\n  async getPublishedPorts() {\n    let ports = await docker(\n      'service',\n      'inspect',\n      '--format',\n      '{{range .Endpoint.Ports}}{{.PublishedPort}} {{end}}',\n      this.element.name\n    )\n\n    this.element.ports = ports\n      .toString('utf-8')\n      .trim()\n      .split(' ')\n  }\n}\n"]}