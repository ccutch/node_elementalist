{"version":3,"sources":["../../src/elements/Manager.js"],"names":["Manager","constructor","element","startup","build","getImagePorts","deploy","getPublishedPorts","status","shutdown","imageName","name","source","port","toString","trim","split","internalPort","ports"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEe,MAAMA,OAAN,CAAc;AAC3BC,cAAYC,OAAZ,EAAqB;AACnB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,QAAMC,OAAN,GAAgB;AACd,UAAM,KAAKC,KAAL,EAAN;AACA,UAAM,KAAKC,aAAL,EAAN;AACA,UAAM,KAAKC,MAAL,EAAN;AACA,UAAM,KAAKC,iBAAL,EAAN;;AAEA,SAAKL,OAAL,CAAaM,MAAb,GAAsB,UAAtB;AACD;;AAED,QAAMC,QAAN,GAAiB;AACf;AACD;;AAED,QAAML,KAAN,GAAc;AACZ,SAAKF,OAAL,CAAaM,MAAb,GAAsB,UAAtB;AACA,SAAKN,OAAL,CAAaQ,SAAb,GAA0B,kBAAiB,KAAKR,OAAL,CAAaS,IAAK,EAA7D;;AAEA,UAAM,sBACJ,OADI,EAEJ,iBAFI,EAGJ,OAHI,EAIJ,KAAKT,OAAL,CAAaQ,SAJT,EAKJ,KAAKR,OAAL,CAAaU,MALT,CAAN;AAOA,UAAM,sBAAO,MAAP,EAAe,KAAKV,OAAL,CAAaQ,SAA5B,CAAN;;AAEA,SAAKR,OAAL,CAAaM,MAAb,GAAsB,OAAtB;AACD;;AAED,QAAMH,aAAN,GAAsB;AACpB,QAAIQ,OAAO,MAAM,sBACf,SADe,EAEf,UAFe,EAGf,2DAHe,EAIf,KAAKX,OAAL,CAAaQ,SAJE,CAAjB;AAMAG,WAAOA,KACJC,QADI,CACK,OADL,EAEJC,IAFI,GAGJC,KAHI,CAGE,GAHF,EAGO,CAHP,CAAP;;AAKA,SAAKd,OAAL,CAAae,YAAb,GAA4BJ,IAA5B;AACD;;AAED,QAAMP,MAAN,GAAe;AACb,SAAKJ,OAAL,CAAaM,MAAb,GAAsB,WAAtB;;AAEA,UAAM,sBACJ,SADI,EAEJ,QAFI,EAGJ,gBAHI,EAIJ,QAJI,EAKJ,KAAKN,OAAL,CAAaS,IALT,EAMJ,WANI,EAOJ,KAAKT,OAAL,CAAae,YAPT,EAQJ,KAAKf,OAAL,CAAaQ,SART,CAAN;;AAWA,SAAKR,OAAL,CAAaM,MAAb,GAAsB,UAAtB;AACD;;AAED,QAAMD,iBAAN,GAA0B;AACxB,QAAIW,QAAQ,MAAM,sBAChB,SADgB,EAEhB,SAFgB,EAGhB,UAHgB,EAIhB,qDAJgB,EAKhB,KAAKhB,OAAL,CAAaS,IALG,CAAlB;;AAQA,SAAKT,OAAL,CAAaW,IAAb,GAAoBK,MACjBJ,QADiB,CACR,OADQ,EAEjBC,IAFiB,GAGjBC,KAHiB,CAGX,GAHW,EAGN,CAHM,CAApB;AAID;AAhF0B;kBAARhB,O","file":"Manager.js","sourcesContent":["import assert from 'assert'\nimport Element from './Element'\nimport docker from '../docker'\n\nexport default class Manager {\n  constructor(element) {\n    // assert(this.element instanceof Element)\n    this.element = element\n  }\n\n  async startup() {\n    await this.build()\n    await this.getImagePorts()\n    await this.deploy()\n    await this.getPublishedPorts()\n\n    this.element.status = 'deployed'\n  }\n\n  async shutdown() {\n    // TODO: write shutdown logic\n  }\n\n  async build() {\n    this.element.status = 'building'\n    this.element.imageName = `localhost:5000/${this.element.name}`\n\n    await docker(\n      'build',\n      '--no-cache=true',\n      '--tag',\n      this.element.imageName,\n      this.element.source\n    )\n    await docker('push', this.element.imageName)\n\n    this.element.status = 'built'\n  }\n\n  async getImagePorts() {\n    let port = await docker(\n      'inspect',\n      '--format',\n      '{{range $p, $conf := .Config.ExposedPorts}}{{$p}} {{end}}',\n      this.element.imageName\n    )\n    port = port\n      .toString('utf-8')\n      .trim()\n      .split(' ')[0]\n\n    this.element.internalPort = port\n  }\n\n  async deploy() {\n    this.element.status = 'deploying'\n\n    await docker(\n      'service',\n      'create',\n      '--detach=false',\n      '--name',\n      this.element.name,\n      '--publish',\n      this.element.internalPort,\n      this.element.imageName\n    )\n\n    this.element.status = 'deployed'\n  }\n\n  async getPublishedPorts() {\n    let ports = await docker(\n      'service',\n      'inspect',\n      '--format',\n      '{{range .Endpoint.Ports}}{{.PublishedPort}} {{end}}',\n      this.element.name\n    )\n\n    this.element.port = ports\n      .toString('utf-8')\n      .trim()\n      .split(' ')[0]\n  }\n}\n"]}